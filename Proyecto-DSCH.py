# -*- coding: utf-8 -*-
"""Copia de ProyectoDS_3_Salinas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HtV7_kHGVhgEvn6HwkwzrIVBNPaqDq8r

Librerias a utilizar
"""

import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

"""Permitiendo acceso al drive"""

from google.colab import drive
import os
drive.mount('/content/gdrive')

df = pd.read_csv('/content/gdrive/MyDrive/CoderHouse/world-data-2023.csv', ",")

df

df_column=df[['CPI','Life expectancy','Co2-Emissions','Infant mortality','Fertility Rate','Population','Density\n(P/Km2)','Birth Rate','Minimum wage', 'Out of pocket health expenditure',
              'Physicians per thousand','Total tax rate','Unemployment rate', 'Urban_population']]
print(df_column)

print('Cantidad de Filas y Columnas', df_column.shape)
print('Nombre de columnas', df_column.columns)

df_column["Population"] = df_column["Population"].str.replace(",", "").astype(float)

df_column["CPI"] = df_column["CPI"].str.replace(",", "").astype(float)
df_column["Unemployment rate"] = df_column["Unemployment rate"].str.replace("%", "").astype(float)

df_column['GDP'] = df_column['GDP'].str.replace("$", "").astype(float)

df_column.info()

df_column["Co2-Emissions"] = df_column["Co2-Emissions"].str.replace(",", "").astype(float)

df_column.info()

df_column.head()

df_column["Total tax rate"] = df_column["Total tax rate"].str.replace("%", "").astype(float)

df_column["Minimum wage"] = df_column["Minimum wage"].str.replace("$", "").astype(float)

df_column["Out of pocket health expenditure"] = df_column["Out of pocket health expenditure"].str.replace("%", "").astype(float)

df_column["Urban_population"] = df_column["Urban_population"].str.replace(",", "").astype(float)

df_column['Density\n(P/Km2)'] = df_column['Density\n(P/Km2)'].str.replace(",", "").astype(float)

df_column.head(5)

df_column=df_column.dropna(axis=0)

X = df_column.drop("Life expectancy", 1)       # feature matrix
y = df_column['Life expectancy']               # target feature
df_column.head()

X

y

"""# Fower Selection"""

import statsmodels.api as sm
def forward_selection(data, target, significance_level=0.01):
    initial_features = data.columns.tolist()
    best_features = []
    while (len(initial_features)>0):
        remaining_features = list(set(initial_features)-set(best_features))
        new_pval = pd.Series(index=remaining_features)
        for new_column in remaining_features:
            model = sm.OLS(target, sm.add_constant(data[best_features+[new_column]])).fit()
            new_pval[new_column] = model.pvalues[new_column]
        min_p_value = new_pval.min()
        if(min_p_value<significance_level):
            best_features.append(new_pval.idxmin())
        else:
            break
    return best_features

forward_selection(X,y)

"""# Hipotesis
La densidad poblacional es inversamente proporcional con la mortalidad infantil

# PARTE 2 DS

Esta base de datos nos permite ver indicacdores economicos y de población. Las cuales permiten tomar deciciones a empresases si es conveniente realizar inversiones en estos paieses o no.
"""

sns.lineplot(x=df_sudamerica['Co2-Emissions'], y = df_sudamerica['Density\n(P/Km2)'], data=df)
plt.show()

sns.histplot(data=df, x =df_sudamerica['Abbreviation'], y =df_sudamerica['Co2-Emissions'], multiple="stack")

fig, ax = plt.subplots(figsize=(8,4))
ax.bar(df_sudamerica['Abbreviation'], df_sudamerica.GDP)
ax.set_title('Paises y si PIB')
ax.set_ylabel('PIB')
ax.set_xlabel('Pais')
plt.show()

fig, ax = plt.subplots()
mapeo_colores = ax.scatter(df_sudamerica['Minimum wage'], df_sudamerica.GDP, c=df_sudamerica.index)
fig.colorbar(mapeo_colores)
ax.set_title('Salario Minimo y PIB')
ax.set_xlabel('PIB)')
ax.set_ylabel('Salario Minimo')

"""¿Como podria arreglar el index para que este continuo?"""

df_sudamerica